From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paneedah <paneedah.github@panada.cc>
Date: Mon, 24 Apr 2023 21:00:52 +0100
Subject: [PATCH] NuclearNetwork - Chorus Plant Patch


diff --git a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
index a6c25647fb37f59307de0d390f8e8cf55504d7d3..79777e8e9a05eb081778a026b5aaefc180705b26 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusPlantBlock.java
@@ -2,12 +2,9 @@ package net.minecraft.world.level.block;
 
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.util.RandomSource;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.LevelAccessor;
-import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
@@ -16,7 +13,7 @@ import net.minecraft.world.level.pathfinder.PathComputationType;
 public class ChorusPlantBlock extends PipeBlock {
     protected ChorusPlantBlock(BlockBehaviour.Properties settings) {
         super(0.3125F, settings);
-        this.registerDefaultState(this.stateDefinition.any().setValue(NORTH, Boolean.valueOf(false)).setValue(EAST, Boolean.valueOf(false)).setValue(SOUTH, Boolean.valueOf(false)).setValue(WEST, Boolean.valueOf(false)).setValue(UP, Boolean.valueOf(false)).setValue(DOWN, Boolean.valueOf(false)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(NORTH, Boolean.FALSE).setValue(EAST, Boolean.FALSE).setValue(SOUTH, Boolean.FALSE).setValue(WEST, Boolean.FALSE).setValue(UP, Boolean.FALSE).setValue(DOWN, Boolean.FALSE));
     }
 
     @Override
@@ -31,49 +28,13 @@ public class ChorusPlantBlock extends PipeBlock {
         BlockState blockState4 = world.getBlockState(pos.east());
         BlockState blockState5 = world.getBlockState(pos.south());
         BlockState blockState6 = world.getBlockState(pos.west());
-        return this.defaultBlockState().setValue(DOWN, Boolean.valueOf(blockState.is(this) || blockState.is(Blocks.CHORUS_FLOWER) || blockState.is(Blocks.END_STONE))).setValue(UP, Boolean.valueOf(blockState2.is(this) || blockState2.is(Blocks.CHORUS_FLOWER))).setValue(NORTH, Boolean.valueOf(blockState3.is(this) || blockState3.is(Blocks.CHORUS_FLOWER))).setValue(EAST, Boolean.valueOf(blockState4.is(this) || blockState4.is(Blocks.CHORUS_FLOWER))).setValue(SOUTH, Boolean.valueOf(blockState5.is(this) || blockState5.is(Blocks.CHORUS_FLOWER))).setValue(WEST, Boolean.valueOf(blockState6.is(this) || blockState6.is(Blocks.CHORUS_FLOWER)));
+        return this.defaultBlockState().setValue(DOWN, blockState.is(this) || blockState.is(Blocks.CHORUS_FLOWER) || blockState.is(Blocks.END_STONE)).setValue(UP, blockState2.is(this) || blockState2.is(Blocks.CHORUS_FLOWER)).setValue(NORTH, blockState3.is(this) || blockState3.is(Blocks.CHORUS_FLOWER)).setValue(EAST, blockState4.is(this) || blockState4.is(Blocks.CHORUS_FLOWER)).setValue(SOUTH, blockState5.is(this) || blockState5.is(Blocks.CHORUS_FLOWER)).setValue(WEST, blockState6.is(this) || blockState6.is(Blocks.CHORUS_FLOWER));
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (!state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, this, 1);
-            return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
-        } else {
-            boolean bl = neighborState.is(this) || neighborState.is(Blocks.CHORUS_FLOWER) || direction == Direction.DOWN && neighborState.is(Blocks.END_STONE);
-            return state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(bl));
-        }
-    }
-
-    @Override
-    public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (!state.canSurvive(world, pos)) {
-            world.destroyBlock(pos, true);
-        }
-
-    }
-
-    @Override
-    public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState blockState = world.getBlockState(pos.below());
-        boolean bl = !world.getBlockState(pos.above()).isAir() && !blockState.isAir();
-
-        for(Direction direction : Direction.Plane.HORIZONTAL) {
-            BlockPos blockPos = pos.relative(direction);
-            BlockState blockState2 = world.getBlockState(blockPos);
-            if (blockState2.is(this)) {
-                if (bl) {
-                    return false;
-                }
-
-                BlockState blockState3 = world.getBlockState(blockPos.below());
-                if (blockState3.is(this) || blockState3.is(Blocks.END_STONE)) {
-                    return true;
-                }
-            }
-        }
-
-        return blockState.is(this) || blockState.is(Blocks.END_STONE);
+        boolean bl = neighborState.is(this) || neighborState.is(Blocks.CHORUS_FLOWER) || neighborState.is(Blocks.NETHER_BRICKS) || neighborState.is(Blocks.NETHER_BRICK_STAIRS);
+        return state.setValue(PROPERTY_BY_DIRECTION.get(direction), bl);
     }
 
     @Override
